/** * Created by krishnagurram on 26/07/15. */package in.donatebloodindia.bloodapp;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.AsyncTask;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.EditText;import android.widget.Toast;import org.json.JSONObject;import java.io.InputStream;import java.io.InputStreamReader;import java.io.Reader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.SocketTimeoutException;import java.net.URL;import java.util.regex.Matcher;import java.util.regex.Pattern;public class ActivityFirstLogin extends Activity{    ProgressDialog progress;    String username, password;    AlertDialog.Builder ad ;    public static  String[] connectionurl;    public static String login_result= "";    public static final String TAG = "ActivityFirstLogin";    protected void onCreate(Bundle savedInstanceState)    {        ad = new AlertDialog.Builder(this);        progress = new ProgressDialog(this);        username=""; password="" ;        // Check whether user has loggedin before or not if logged true will be returned        if( !check_userloggedin())        {            //User is has logout out or entering for first time.            //show login screen            super.onCreate(savedInstanceState);            setContentView(R.layout.first_login);        }        else        {            super.onCreate(savedInstanceState);            setContentView(R.layout.first_login);            String url_login_string = "http://donatebloodindia.in/api/login.php?Usertype=1&Password="+username +"&Phone=" + password;            Log.d("autologin"  ,username + password);            String parameters[] = { url_login_string , username, password};            // called when user presses login button            // Check Internet connectivity first            ConnectivityManager  cm = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);            NetworkInfo activeNetwork = cm.getActiveNetworkInfo();            if (activeNetwork!= null &&    activeNetwork.isConnected() )            {                new login_checkprocess().execute(parameters);            }            else            {                Toast.makeText(getApplicationContext(), "Internet is not enabled, Check internet settings", Toast.LENGTH_LONG).show();            }            //Intent intent = new Intent(this, HomeMainActivity.class);            //startActivity(intent);        }    }    private boolean check_userloggedin()    {        Log.d("acitivityfirstlogin_check_userloggedin", "Checking User has Logged Session or not");        SharedPreferences sh_pref = getApplicationContext().getSharedPreferences("applogin", Context.MODE_PRIVATE);        //SharedPreferences.Editor editor = sh_pref.edit();        //User already logged in. Search for App login credentials        // it is set to 1, if user has logged in successfully earlier , else it is set to 0        int tmp_int  = sh_pref.getInt("applogincredentials", 0);        Log.d("acitivityfirstlogin_check_userloggedin", String.valueOf(tmp_int));        if(tmp_int == 0)        {            Log.d("acitivityfirstlogin_check_userloggedin", "No app login credentials");            return false;            // Modifying the value view_login . Setting it to Zero. which represents that            // user has succesfully logged-out or user hasn't logged in        }        else        {            // if tmp_int is set to 1,            // search user-name and password in stored locally in the shared preference items            Log.d("Already login status", "Yes");            username =  sh_pref.getString("username", "");            password =  sh_pref.getString("password", "");            Log.d("acitivityfirstlogin_check_userloggedin",  username.toString() + password.toString());            if( username.isEmpty() || password.isEmpty())            {                //if anyone of them is empty or nonexistent.                //view_login = 0;                // So that login page is seen to the customer                return false;            }            else            {                //view_login=1;                // user loggedin earlier, so returning true                return true;            }        }    }    public void register_firstlogin(View view)    {        // Call Activity of register screen        Intent intent = new Intent(this, MainActivity.class);        startActivity(intent);    }    public void login_firstlogin(View view)    {        // called when user presses login button        // Check Internet connectivity first        ConnectivityManager  cm = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();        progress = new ProgressDialog(this);        if (activeNetwork!= null &&    activeNetwork.isConnected() )        {            // Get the credentials entered by user            // check credetials with that from system using api            // If successful move Home screen and set applogincredentials value to 1            // else show error and set            Log.d("LoginActivity", "Entered login_firstlogin");            EditText ed_login = (EditText) findViewById(R.id.donor_login_firstlogin);            EditText ed_password = (EditText) findViewById(R.id.donor_password_firstlogin);            //Validate Input            Pattern p = Pattern.compile("[^a-zA-Z ]");            Matcher m_fname = p.matcher(ed_login.getText().toString().trim() );            boolean b_fname = m_fname.find();            //Create URL string for which login credentials will be checked            String url_login_string = "http://donatebloodindia.in/api/login.php?Usertype=1&Password="+ed_password.getText() +"&Phone=" + ed_login.getText();            Log.d("LoginActivity", url_login_string);            // sending URL and Login credentials, Login credentials will be saved once login is successful            String parameters[] = { url_login_string , ed_login.getText().toString(), ed_password.getText().toString()};            connectionurl = parameters;            // Call function to verify the user login credentials            new login_checkprocess().execute(parameters);            if (login_result=="success_login")            {                // Check the GCM id is stored in preferences or not                //  if set check the phone number of the earlier logged phone number                // if phone number is same. not need to updated gcm id in server                // if different or gcm id then updated new GCM id in the server                // with corresponding phone number. Here Phone number and gcm id associated .                Log.d(TAG,"SUCCESS_LOGIN");            }            else if (login_result=="failure")            {                Log.d(TAG, "in Failure message");                AlertDialog.Builder ad = new AlertDialog.Builder(ActivityFirstLogin.this);                ad.setMessage("There seems to be network issue");                ad.setTitle("Retry");                ad.setPositiveButton("Retry", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int which) {                        Log.d(TAG, "MESSAGE SUCCESSFUL for failure");                    }                });                ad.setNeutralButton("Cancel", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int which) {                        Log.d(TAG, "User pressed cancel button");                        login_result="";                        finish();                    }                });                ad.show();            }        }        else        {            Toast.makeText(this, "There seems no Internet Connection. Please enable and try again", Toast.LENGTH_LONG).show();        }    }    private class login_checkprocess extends AsyncTask<String, Void , String>    {        public String username="",  password="";        protected void onPreExecute()        {            //progress = new ProgressDialog(getApplicationContext());            progress.setMessage("Logging in");            progress.show();        }        @SuppressLint("ShowToast")        protected String doInBackground(String... params)        {            username=params[1];            password=params[2];            //  returns the output of the API after executing the httpurl i.e login check            InputStream is=null;            char[] buffer = new char[2000];            String url_response = null;            //Create HTTP Connection and execute & get response            try            {                URL url_string=  new URL(params[0]);                Log.d(TAG, "about to establish connection");                HttpURLConnection  connection =  (HttpURLConnection) url_string.openConnection();                connection.setConnectTimeout(5000);                connection.connect();                Log.d(TAG, "connection established");                if(connection.getResponseCode()== HttpURLConnection.HTTP_OK) {                    //Get input stream                    is = connection.getInputStream();                    Reader reader = null;                    reader = new InputStreamReader(is, "UTF-8");                    reader.read(buffer);                    Log.d(TAG, "jsonresponse" + String.valueOf(buffer).trim());                    return String.valueOf(buffer).trim();                }                else                {                    Log.d(TAG,"HTTPConnection ISSUE");                }            }            catch (MalformedURLException e)            {                e.printStackTrace();            }            catch ( SocketTimeoutException ste)            {                Log.d(TAG, "TIMEOUT ISSUE");            }            catch (Exception e)            {                e.printStackTrace();            }            return null ; // if there is any issue return null        }        protected void onPostExecute(String login_url_response)        {            // login_url_response is the json response from executing the login api            // Reading JSON output  using read_jsonresponse            // this read_jsonresponse function returns the            // city if there is succesfull login else returns null            //if ( login_url_response == null || login_url_response.isEmpty())            //{            //making sure the response is not null or empty            //	Toast.makeText(getApplicationContext(), "Oops seems that server overloaded . Try again after some time", Toast.LENGTH_LONG).show();            //	finish();            //}            // login_url_response value is null if there is any in background            if (login_url_response == null )            {                progress.dismiss();                login_result="failure";            }            else            {                String[] responsejson = read_jsonresponse(login_url_response);                progress.dismiss();                Log.d(TAG, responsejson[0] + responsejson[1]);                //making sure the response is not null or empty                if (responsejson[0].isEmpty() && !responsejson[1].isEmpty()) {                    //Toast.makeText(getApplicationContext(), "Oops seems that server overloaded . Try again after some time", Toast.LENGTH_LONG).show();                }                if (!responsejson[0].isEmpty() && responsejson[0].equalsIgnoreCase("failed")) {                    // Show message that login credentials were not incorrect.                    ad.setMessage("Login Failed. Please enter valid username & password");                    //ad.setTitle("Error");                    ad.setNeutralButton("OK", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            // TODO Auto-generated method stub                        }                    });                    ad.setCancelable(true);                    Dialog aDialog = ad.create();                    Log.d("LoginActivity", "LoginActivity");                    ad.show();                } else if (responsejson[0].equalsIgnoreCase("success")) {                    // Start Home screen with city                    progress.dismiss();                    // set login_result to success                    login_result = "login_success";                    // Store the login credentials in the shared preferences files                    SharedPreferences sh_pref = getApplicationContext().getSharedPreferences("applogin", Context.MODE_PRIVATE);                    SharedPreferences.Editor editor = sh_pref.edit();                    editor.putInt("applogincredentials", 1);                    editor.putString("username", username);                    editor.putString("password", password);                    editor.commit();                    Log.d("commitingusername*passwrod in shared expereicne", username + password);                    // get the all parameters of the user after successfull login and store in global variables                    // in static object class of  BloodApplicationGlobalVariables.                    final BloodApplicationGlobalVariables bagv = (BloodApplicationGlobalVariables) getApplication();                    bagv.setbloodgroup(responsejson[4]);                    bagv.setcity(responsejson[1]);                    bagv.setsessionid(responsejson[2]);                    bagv.setname(responsejson[3]);                    bagv.setage(Integer.parseInt(responsejson[5]));                    bagv.setlocation(responsejson[6]);                    // Store the login credentials in SharedPreferences file.                    SharedPreferences shared_pref = getSharedPreferences("myregistration", Context.MODE_PRIVATE);                    SharedPreferences.Editor edi_tor = shared_pref.edit();                    edi_tor.putString("usercity", responsejson[1]);                    edi_tor.putString("userSessionId", responsejson[2]);                    edi_tor.putString("userName", responsejson[3]);                    edi_tor.putString("userBloodGroup", responsejson[4]);                    edi_tor.putString("userAge", responsejson[5]);                    edi_tor.putString("userLocation", responsejson[6]);                    edi_tor.putString("userPhone", username);                    edi_tor.putString("userPassword", password);                    edi_tor.putString("userStatus", responsejson[7]);                    edi_tor.commit();                    Intent intent1 = new Intent();                    intent1.setClass(getApplicationContext(), HomeMainActivity.class);                    intent1.putExtra("city", responsejson[1]);                    intent1.putExtra("SessionId", responsejson[2]);                    intent1.putExtra("Name", responsejson[3]);                    intent1.putExtra("BloodGroup", responsejson[4]);                    intent1.putExtra("Age", responsejson[5]);                    intent1.putExtra("Location", responsejson[6]);                    startActivity(intent1);                }            }        }        protected String[] read_jsonresponse(String json_string)        {            // Read JSON output            JSONObject json_obj, json_obj1 ,json_obj2;            String response_json=null, city_json =null, sessionid_json=null;            String name_json=null, bloodgroup_json=null , age_json=null, location_json=null , status_json=null;            try {                json_obj = new JSONObject(json_string);                json_obj1= json_obj.getJSONObject("Login");                response_json = json_obj1.getString("status");                // finding the 'status'of the response                // if response is success the find the 'city' tag in JSON                // this gives the city of the user logged and session id of the login.                // session id will be used to get myprofile details of the user                if(response_json.equalsIgnoreCase("success"))                {                    json_obj2 = json_obj1.getJSONObject("UserDetails");                    city_json = json_obj2.getString("City");                    sessionid_json = json_obj2.getString("SessionId");                    name_json = json_obj2.getString("Name");                    bloodgroup_json = json_obj2.getString("BloodGroup");                    age_json=  json_obj2.getString("Age");                    location_json = json_obj2.getString("Location");                    status_json = json_obj2.getString("Status");                }            } catch (Exception e) {                // TODO Auto-generated catch block                e.printStackTrace();                Toast.makeText(getApplicationContext(), "Oops seems that server overloaded . Try again after some time", Toast.LENGTH_LONG).show();            }            //   response_json : it is either success or failure            //   if response_json is 'success' then city_json has city the user has registered            String[] response = { response_json, city_json, sessionid_json , name_json, bloodgroup_json, age_json, location_json,status_json };            // Log.d("LoginActivity_json response" , response_json);            return response;        }    }}